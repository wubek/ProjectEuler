# author wukat
'''
Triangle, square, pentagonal, hexagonal, heptagonal, 
and octagonal numbers are all figurate (polygonal) 
numbers and are generated by the following formulae:

Triangle        P3,n=n(n+1)/2       1, 3, 6, 10, 15, ...
Square          P4,n=n^2            1, 4, 9, 16, 25, ...
Pentagonal      P5,n=n(3n-1)/2      1, 5, 12, 22, 35, ...
Hexagonal       P6,n=n(2n-1)        1, 6, 15, 28, 45, ...
Heptagonal      P7,n=n(5n-3)/2      1, 7, 18, 34, 55, ...
Octagonal       P8,n=n(3n-2)        1, 8, 21, 40, 65, ...
The ordered set of three 4-digit numbers: 8128, 2882, 8281, 
has three interesting properties.

The set is cyclic, in that the last two digits of each number 
is the first two digits of the next number (including the last number with the first).

Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), 
and pentagonal (P5,44=2882), is represented by a different number in the set.

This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers 
for which each polygonal type: triangle, square, pentagonal, hexagonal, 
heptagonal, and octagonal, is represented by a different number in the set.
'''

def gen_triangles():
    n = 1
    while True:
        yield n * (n + 1) / 2
        n += 1

def gen_squares():
    n = 1
    while True:
        yield n ** 2
        n += 1

def gen_pentagonals():
    n = 1
    while True:
        yield n * (3*n - 1) / 2
        n += 1

def gen_hexagonals():
    n = 1
    while True:
        yield n * (2*n - 1)
        n += 1

def gen_heptagonals():
    n = 1
    while True:
        yield n * (5*n - 3) / 2
        n += 1

def gen_octagonals():
    n = 1
    while True:
        yield n * (3*n - 2) 
        n += 1

def make_4_digits_list(generator):
    result = []
    for num in generator:
        if num >= 10000:
            break
        if num >= 1000:
            result.append(num)
    return result

def are_equal_2_last_2_first(num1, num2):
    return str(num1)[2:] == str(num2)[:2]

def make_list(num, others):
    return [i for i in others if are_equal_2_last_2_first(num, i)]

def make_dict(list_of_nums, others):
    return {i: make_list(i, others) for i in list_of_nums}

def obtain_index_without_0(num, list_of_list):
    for i in range(1, len(list_of_list)):
        if num in list_of_list[i]:
            return i

# so ugly, so sad
def solve():
    list_of_list = [make_4_digits_list(gen_triangles()), 
        make_4_digits_list(gen_squares()), make_4_digits_list(gen_pentagonals()), 
        make_4_digits_list(gen_hexagonals()), make_4_digits_list(gen_heptagonals()),
        make_4_digits_list(gen_octagonals())]
    tr_dict = make_dict(list_of_list[0], sum(list_of_list[1:], []))
    sq_dict = make_dict(list_of_list[1], sum(list_of_list[2:], []))
    pe_dict = make_dict(list_of_list[2], list_of_list[1] + sum(list_of_list[3:], []))
    hx_dict = make_dict(list_of_list[3], sum(list_of_list[1:3], []) + sum(list_of_list[4:], []))
    hp_dict = make_dict(list_of_list[4], sum(list_of_list[1:4], []) + list_of_list[5])
    oc_dict = make_dict(list_of_list[5], sum(list_of_list[1:5], []))

    list_of_dicts = [tr_dict, sq_dict, pe_dict, hx_dict, hp_dict, oc_dict]
    for tr in tr_dict:
        for t in tr_dict[tr]:
            ind = obtain_index_without_0(t, list_of_list)
            for k in list_of_dicts[ind][t]:
                ind2 = obtain_index_without_0(k, list_of_list)
                if ind2 != ind and ind2 != 0:
                    for j in list_of_dicts[ind2][k]:
                        ind3 = obtain_index_without_0(j, list_of_list)
                        if ind3 != ind2 and ind3 != ind and ind3 != 0:
                            for l in list_of_dicts[ind3][j]:
                                ind4 = obtain_index_without_0(l, list_of_list)
                                if ind4 not in [ind3, ind2, ind, 0]:
                                    for m in list_of_dicts[ind4][l]:
                                        ind5 = obtain_index_without_0(m, list_of_list)
                                        if ind5 not in [0, ind, ind2, ind3, ind4]:
                                            if are_equal_2_last_2_first(m, tr):
                                                return tr + t + k + j + l + m

if __name__ == '__main__':
    print(solve())